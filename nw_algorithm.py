# -*- coding: utf-8 -*-
"""NW_Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdAJybqoyvcL3fI0VQvoIDhjMl9l6qi1
"""

#Matrix formation and Optimal alignment score
import numpy as np

s = 'GGTTGACTA'
t = 'TGTTACGG'
m = len(s)+1
n = len(t)+1

match = 2
mismatch = -2
gap = -1 

V = np.zeros((m, n))

for i in range(1, m):
    V[i][0] = V[i-1][0] + gap

for j in range(1, n):
     V[0][j] = V[0][j-1] + gap

for i in range(1, m):
    for j in range(1, n):
         
        if (s[i-1] == t[j-1]):
          score = match
        else:
          score = mismatch

        h_val = V[i][j-1] + gap
        v_val = V[i-1][j] + gap
        d_val = V[i-1][j-1] + score
        o_val = [h_val, d_val, v_val]
        V[i][j] = max(o_val)

print ("Alignment Matrix:")
print (V)
print ("\nOptimal Alignment Score:", V[i][j])

# Backtracking 
i = len(s)
j = len(t)

align_s = ''
align_t = ''

while (i!=0 or j!=0):
    if (s[i-1] == t[j-1]):
      score = match
    else:
      score = mismatch

    if (V[i][j] == V[i-1][j-1] + score):
        align_s = s[i-1] + align_s
        align_t = t[j-1] + align_t
        i = i-1
        j = j-1

    elif (V[i][j] == V[i][j-1] + gap):
          align_s = '_' + align_s
          align_t = t[j-1] + align_t
          j = j-1

    elif (V[i][j] == V[i-1][j] + gap):
          align_s = s[i-1] + align_s
          align_t = '_' + align_t
          i = i-1

print ("Optimal Alignment of t: ", align_t)
print ("Optimal Alignment of s: ", align_s)